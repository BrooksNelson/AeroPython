import math

import numpy

from matplotlib import pyplot

# embed figures into the notebook

%matplotlib inline

 

N = 100                              # Number of points in each direction

x_start, x_end = -2, 2            # x-direction boundaries

y_start, y_end = -2, 2            # y-direction boundaries

x = numpy.linspace(x_start, x_end, N)    # creates a 1D-array for x

y = numpy.linspace(y_start, y_end, N)    # creates a 1D-array for y

X, Y = numpy.meshgrid(x, y)              # generates a mesh grid

 

#Flow around a Doublet

 

kappa = 1                    # strength of the doublet = (U*a^2)*(2*pi)

x_doublet, y_doublet = 0.0, 0.0    # location of the doublet

 

def get_velocity_doublet(strength, xd, yd, X, Y):

    """

    Returns the velocity field generated by a doublet.

   

    Parameters

    ----------

    strength: float

        Strength of the doublet.

    xd: float

        x-coordinate of the doublet.

    yd: float

        y-coordinate of the doublet.

    X: 2D Numpy array of floats

        x-coordinate of the mesh points.

    Y: 2D Numpy array of floats

        y-coordinate of the mesh points.

   

    Returns

    -------

    u: 2D Numpy array of floats

        x-component of the velocity vector field.

    v: 2D Numpy array of floats

        y-component of the velocity vector field.

    """

    u = (- strength / (2 * math.pi) *

         ((X - xd)**2 - (Y - yd)**2) /

         ((X - xd)**2 + (Y - yd)**2)**2)

    v = (- strength / (2 * math.pi) *

         2 * (X - xd) * (Y - yd) /

         ((X - xd)**2 + (Y - yd)**2)**2)

   

    return u, v

 

def get_stream_function_doublet(strength, xd, yd, X, Y):

    """

    Returns the stream-function generated by a doublet.

   

    Parameters

    ----------

    strength: float

        Strength of the doublet.

    xd: float

        x-coordinate of the doublet.

    yd: float

        y-coordinate of the doublet.

    X: 2D Numpy array of floats

        x-coordinate of the mesh points.

    Y: 2D Numpy array of floats

        y-coordinate of the mesh points.

   

    Returns

    -------

    psi: 2D Numpy array of floats

        The stream-function.

    """

    psi = - strength / (2 * math.pi) * (Y - yd) / ((X - xd)**2 + (Y - yd)**2)

   

    return psi

 

# compute the velocity field on the mesh grid

u_doublet, v_doublet = get_velocity_doublet(kappa, x_doublet, y_doublet, X, Y)

 

# compute the stream-function on the mesh grid

psi_doublet = get_stream_function_doublet(kappa, x_doublet, y_doublet, X, Y)

 

u_inf = 1      # freestream speed

 

u_freestream = u_inf * numpy.ones((N, N), dtype=float)

v_freestream = numpy.zeros((N, N), dtype=float)

 

psi_freestream = u_inf * Y

 

# superposition of the doublet on the freestream flow

u = u_freestream + u_doublet

v = v_freestream + v_doublet

psi = psi_freestream + psi_doublet

 

# plot the streamlines

width = 10

height = (y_end - y_start) / (x_end - x_start) * width

pyplot.figure(figsize=(width, height))

pyplot.xlabel('x', fontsize=16)

pyplot.ylabel('y', fontsize=16)

pyplot.xlim(x_start, x_end)

pyplot.ylim(y_start, y_end)

pyplot.streamplot(X, Y, u, v,

                  density=2, linewidth=1, arrowsize=1, arrowstyle='->')

pyplot.contour(X, Y, psi,

               levels=[0.], colors='#CD2305', linewidths=2, linestyles='solid')

pyplot.scatter(x_doublet, y_doublet, color='#CD2305', s=80, marker='o')

 

# calculate the stagnation points

x_stagn1, y_stagn1 = +math.sqrt(kappa / (2 * math.pi * u_inf)), 0.0

x_stagn2, y_stagn2 = -math.sqrt(kappa / (2 * math.pi * u_inf)), 0.0

 

# display the stagnation points

pyplot.scatter([x_stagn1, x_stagn2], [y_stagn1, y_stagn2],

               color='g', s=80, marker='o');
